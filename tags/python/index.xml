<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Zardam&#39;s home</title>
    <link>https://zardam.github.io/tags/python/</link>
    <description>Recent content in Python on Zardam&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2025, all rights reserved.</copyright>
    <lastBuildDate>Sat, 26 Jul 2025 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://zardam.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bad Apple on a Minitel</title>
      <link>https://zardam.github.io/post/minitel/</link>
      <pubDate>Sat, 26 Jul 2025 00:00:00 +0200</pubDate>
      
      <guid>https://zardam.github.io/post/minitel/</guid>
      <description>Why I really enjoyed the work of HxC2001, and I&amp;rsquo;ve always wanted do do something like this with a Minitel.
How The first thing to do was to buy a Minitel. I bought the same model I had at home for close to nothing:
It&amp;rsquo;s an Alcatel branded one, and it is actually quite different from the Philips of HxC2001. Hopefully, there is a lot of information about it here, including a detailed technical description and schematics.</description>
    </item>
    
    <item>
      <title>TI-83 ESP8266 Python module</title>
      <link>https://zardam.github.io/post/ti83-python-2/</link>
      <pubDate>Fri, 24 May 2019 23:30:00 +0200</pubDate>
      
      <guid>https://zardam.github.io/post/ti83-python-2/</guid>
      <description>With the help of a custom firmware, the Python module is converted into an USB to serial bridge, connected to an ESP8266 module that was added inside the case.
The ESP8266 is running a stock MicroPython. The video is showing some interactions with the ESP8266 over WiFi with MicroPython WebREPL, while the module is connected to the calculator.
Everything typed on the WebREPL could have been entered directly on the calculator, but typing on a real keyboard if far more easy (at least for me) !</description>
    </item>
    
    <item>
      <title>TI-83 Raspberry PI Python module</title>
      <link>https://zardam.github.io/post/ti83-python/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>https://zardam.github.io/post/ti83-python/</guid>
      <description>The TI-83 Python module The module was released as an add-on to the calculator to add a Python interpreter. There was a lot of questions about it, and it was found that it is running a custom CircuitPython
Dumping the firmware Before discovering the bootloader trick, I dumped pretty easily the firmware, using a BlackMagicProbe and test points TP7 and TP8 on the back of the modules. This correspond to the SWD debug interface (SWDIO on TP7 and SWDCLK on TP8).</description>
    </item>
    
  </channel>
</rss>