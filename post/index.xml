<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zardam&#39;s home</title>
    <link>https://zardam.github.io/post/</link>
    <description>Recent content in Posts on Zardam&#39;s home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2018, all rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Nov 2018 22:30:01 +0100</lastBuildDate>
    
	<atom:link href="https://zardam.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NumWorks additional flash &amp; giac</title>
      <link>https://zardam.github.io/post/numworks-giac/</link>
      <pubDate>Sun, 25 Nov 2018 22:30:01 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/numworks-giac/</guid>
      <description>Disclaim This article is not up to date. It is just a place to document what I have done some time ago regarding this contest on TI-Planet : https://tiplanet.org/forum/viewtopic.php?t=20557
Introduction First, a compatible SPI flash chip must be soldered inside the calculator on the U7 pad. I used an AT25SF641 kindly donated by TI-Planet, as it was the part referenced on the official schematics.
At the time, there was no implementation of USB inside the official firmware so I choose to write a small loader compatible with the flashrom serprog protocol.</description>
    </item>
    
    <item>
      <title>NES emulator on NumWorks calculator</title>
      <link>https://zardam.github.io/post/nofrendo/</link>
      <pubDate>Fri, 17 Aug 2018 23:37:56 +0200</pubDate>
      
      <guid>https://zardam.github.io/post/nofrendo/</guid>
      <description>Demo   UPDATE I have put together an utility to flash a precompiled firmware here : https://zardam.github.io/webnofrendo
Background This is a port of nofrendo NES Emulator. Some adaptations were borrowed from esp32-nesemu, and some ugly additional work was done to make it run on the calculator.
The port is very basic, there is no sound (it should be possible to abuse the USB port for this), and the state is not saved (even the SRAM of the cartridge, if any).</description>
    </item>
    
    <item>
      <title>Logitech Harmony 200 Repair</title>
      <link>https://zardam.github.io/post/harmony200-repair/</link>
      <pubDate>Sat, 24 Mar 2018 22:28:29 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/harmony200-repair/</guid>
      <description>For some time, my trusted all in one remote control was having problems. Some buttons were not working very well : the &amp;ldquo;Watch TV&amp;rdquo;, &amp;ldquo;TV&amp;rdquo; and &amp;ldquo;left&amp;rdquo;.
The &amp;ldquo;Watch TV&amp;rdquo; required very high pressure, and the two other where not working about half of the time, independently of the pressure on the button.
For the &amp;ldquo;Watch TV&amp;rdquo;, after testing the contact directly on the pads of the remote, it was clear that the problem came from the black conductive pad on the button.</description>
    </item>
    
    <item>
      <title>RF plugs clean integration</title>
      <link>https://zardam.github.io/post/rf-plug-integrated/</link>
      <pubDate>Thu, 22 Mar 2018 22:16:34 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/rf-plug-integrated/</guid>
      <description>Introduction Since I&amp;rsquo;m lazy, I wanted to control remotely two floor lamps in my house. I bought some cheap RF outlets, but I did not want to have another ugly looking and always lost remote control in the house. So a clean solution was needed !
This is the kind of RF plug I used :
                  The idea was to add a standard light switch in an existing box.</description>
    </item>
    
    <item>
      <title>NumWorks controlling a pyboard rover</title>
      <link>https://zardam.github.io/post/numworks-uart-rover/</link>
      <pubDate>Tue, 20 Mar 2018 23:10:51 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/numworks-uart-rover/</guid>
      <description>Just a small video about controlling a MicroPython pyboard based rover by a NumWorks calculator.
This is one of the rover my wife is using to teach Python programming in her high school. They were modified to use a pyboard instead of the original arduino controller using a custom PCB.
  </description>
    </item>
    
    <item>
      <title>NumWorks UART Over USB port</title>
      <link>https://zardam.github.io/post/numworks-uart-over-usb/</link>
      <pubDate>Fri, 09 Mar 2018 00:42:51 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/numworks-uart-over-usb/</guid>
      <description>Some people are complaining about the lack of connectivity to the outside world from the calculator, but in fact it is pretty simple to change that.
According to the calculator schematics, the USB port of the calculator is wired to PA11 and PA12 of the STM32F412. We have this in the datasheet about these pins :
So, it is possible to map an UART on the USB port D+ and D-.</description>
    </item>
    
    <item>
      <title>OpenOCD on the Raspberry Pi inside a NumWorks calculator</title>
      <link>https://zardam.github.io/post/raspberrypi-numworks-openocd/</link>
      <pubDate>Wed, 07 Mar 2018 21:18:49 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/raspberrypi-numworks-openocd/</guid>
      <description>In my previous post I added a Raspberry Pi Zero inside the calculator. Why not use also it to program/debug the calculator firmware ?
What I have done is basically to follow this adafruit tutorial.
I soldered only SWDIO to Raspberry Pi #24 and SWCLK to Raspberry Pi #25. This seems to be enough, and the reset button of the calculator is not far away if needed.
Using the following OpenOCD script, it is now possible to debug or program the calculator over the air !</description>
    </item>
    
    <item>
      <title>Adding a Raspberry Pi inside a NumWorks calculator</title>
      <link>https://zardam.github.io/post/raspberrypi-numworks/</link>
      <pubDate>Sun, 25 Feb 2018 22:00:00 +0100</pubDate>
      
      <guid>https://zardam.github.io/post/raspberrypi-numworks/</guid>
      <description>I was having a Raspberry Pi Zero sitting on my desk for a long time, searching for something to do with it. I also wanted to to learn STM32, mainly DMA and interrupts. As the calculator is powered by an STM32F412, why not put them together ?
TL;DR, the result:   The idea was to add an application on the calculator, which will display the output of the Raspberry Pi, and send keystroke from the keyboard to it.</description>
    </item>
    
  </channel>
</rss>